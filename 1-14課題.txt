⚫️課題1−14
① アクセス修飾子とは何ですか？
クラス、変数やメソッドを参照、使う際アクセスするが、ものによっては他のインスタンスから書き込みさせたくない、という場合もあり、逆に広く使ってほしい変数やメソッドもある。そういった、アクセスの制限をコントロールするものをアクセス修飾子と呼ぶ。

② アクセス修飾子でアクセスレベルが上から２番目のものは何ですか？
protected
　
③ Privateアクセス修飾子はどのような場面で利用しますか？例をあげなさい。
不用意に外部からのアクセスを許さず、かつ外部からは決められたメソッドからのみアクセスさせたい場合に使います。例えば、nameという変数があり、この変数を直接使って値を入れてしまうと、クラス内のデータの整合性の維持が難しくなりますが、コンストラクタを使ってでしかアクセスできないようにすることで外部からの直接アクセスを制限することができます。
private String name;

public Person(String name){
 this.name = name;
}

protected void printAccountInfo(){
 System.out.println("ユーザー名は、" + name);}

public class Main{
 public static void main(String[] args){
  User user = new User("Road");
  user.printAccountInfo();}
このように、コンストラクタ経由からでしかアクセスできないようになります。

④Publicアクセス修飾子はどのような場面で利用しますか？例をあげなさい。
どこからでもアクセスを可能にできるアクセス修飾子。パッケージの直下にあるクラスに付加できるのはpublicのみ。クラスのコンストラクタにpublicアクセス修飾子を指定すると、そのクラスにアクセスできる全てのクラスからインスタンスを生成できる。問③のコードで説明しますと、privateで守られている変数にアクセスするために、どのクラスからでもアクセスできるコンストラクタを作成する場合に使います。

⑤メンバー変数とローカル変数の違いは何ですか？
メンバー変数はクラスに直接かかれる変数のことで、フィールドと呼ばれます。フィールドはクラス内のメソッドから参照可能な変数になっています。ローカル変数とは、メソッド内で定義される変数のことです。このローカル変数のスコープはメソッド内だけですので、他のメソッドから別のメソッドのローカル変数にアクセスすることはできませんし、メソッドを抜けるとそのローカル変数は消滅します。

⑥シングルトンとは何ですか？Javaでの実装方法について説明してください。
あるクラスのインスタンスを2つ以上作成できないようにすることで、「どこからアクセスしても常に同一のインスタンスが参照される」ことを保証するデザインパターンです。
実装方法は、唯一となるインスタンスにstaticを付けてnewで代入します。その後外部からインスタンスの生成ができないようにするために、コンストラクタにprivate修飾子を指定します。最後に、唯一のインスタンスシングルトンを返すgetterを、どこからでもアクセスできるようpublicにして定義します。これで、シングルトンパターンを適用できます。


⑦シングルトンを使用する利点は何ですか？例を挙げて説明してください。
クラスオブジェクトが1つなのに対して、インスタンスオブジェクトは通常、複数個作成できます。ただ、インスタンスを複数作成可能だからといって、複数作成してしまうと見づらかったり、混乱を招くため、１つのインスタンスを生成しておいて、複数クラスでそれを使いまわせばいいことです。しかし、複数作成可能という仕組み上許されている時点で、使用者が複数インスタンスを作成してしまう可能性があります。シングルトンは、あえて「インスタンスを1つしか作成できない」設計にすることで、クラスの使用者に１つのインスタンスを使いまわすことを強制します。
例えば、DBにアクセスするためのクラスを使用者各自が自由にインスタンス化して変更したとすると各インスタンス間でDBアクセスをする際にオブジェクトの状態が異なることから不整合が生じる可能性があります。しかし、シングルトンパターンを使えば1度インスタンス化されたオブジェクトは再度インスタンス化されることを防ぎ、常に同じオブジェクトを使いまわすことが保証されます。

⑧シングルトンを使用する際に気をつけるべき点は何ですか？説明してください。
拡張性が狭まってしまう場合があります。例えば、将来的にそのクラスが本当に１つのインスタンスでいいのか予測が困難ということです。サービスに柔軟性が求められない場合は問題ないですが、ビジネス側が柔軟性を求めるようになってきた場合身動きできなくなることが考えられます。単一の責任を果たすだけでは間に合わなくなってしまう。
単体テストがやりにくくなってしまいます。クラス間が疎結合であることが前提の単体テストですが、依存関係状態を作り出してしまう危険性があります。
多くのメンバ変数を持つクラスには不向きです。シングルトンパターンの性質上同じオブジェクトを複数箇所で使うことになります。これは言い換えると、その中に含まれるメンバ変数などはグローバル変数と変わらないということになります。エンジニアにとってどこからでもアクセスし、変更できるグローバル変数はバグの温床になるためです。
